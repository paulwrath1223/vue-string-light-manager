

cURL method:

      Get:

      curl 'https://light-data1-default-rtdb.firebaseio.com/.json?auth=xnsxVJEbZchsxN2XPCkxAPhlZXdvWBt318oq98jh'

      Set:
      const path = 'Arduino' + (ID of arduino) + '/'
      curl -X PUT -d '{
        path : {
        json arduino(example at "example arduino json.json")
        }
      }' 'https://light-data1-default-rtdb.firebaseio.com/.json?auth=xnsxVJEbZchsxN2XPCkxAPhlZXdvWBt318oq98jh'

      Get in JS: (no worky)

      <script>
        function gotData(data) {
          console.log(data);
        }
      </script>
      <script src="https://light-data1-default-rtdb.firebaseio.com/.json?auth=xnsxVJEbZchsxN2XPCkxAPhlZXdvWBt318oq98jh&callback=gotData">


COLOR COMPILER FROM C#:

private List<RGBColorBasic> ColorCompiler(List<RGBColor> colorsIn)
        {
            List<RGBColorBasic> colorsOut = new List<RGBColorBasic>();
            RGBColor CurrentColor;
            RGBColor NextColor;
            float dr;
            float dg;
            float db;
            List<int> rs = new List<int>();
            List<int> gs = new List<int>();
            List<int> bs = new List<int>();
            for (int index = 0; index < colorsIn.Count(); index++)
            {
                if(index + 1 == colorsIn.Count())
                {
                    NextColor = colorsIn[0];
                }
                else
                {
                    NextColor = colorsIn[index + 1];
                }
                CurrentColor = colorsIn[index];
                dr = (float)(NextColor._r - CurrentColor._r) / (float)(CurrentColor._transitionFrames - 1);
                dg = (float)(NextColor._g - CurrentColor._g) / (float)(CurrentColor._transitionFrames - 1);
                db = (float)(NextColor._b - CurrentColor._b) / (float)(CurrentColor._transitionFrames - 1);
                for (int index2 = 0; index2 < CurrentColor._transitionFrames; index2++)
                {
                    rs.Add(CurrentColor._r + (int)((float)index2 * dr));
                    gs.Add(CurrentColor._g + (int)((float)index2 * dg));
                    bs.Add(CurrentColor._b + (int)((float)index2 * db));
                }
            }
            for(int index3 = 0; index3 < rs.Count; index3++)
            {
                colorsOut.Add(new RGBColorBasic(rs[index3], gs[index3], bs[index3]));
            }
            return colorsOut;
        }
